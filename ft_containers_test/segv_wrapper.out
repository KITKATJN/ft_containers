[FAIL ASSERT] {vector} {vector.rbegin} src/vector_test.cpp:322 (v1_it[0] == 5)
[FAIL ASSERT] {vector} {vector.rbegin} src/vector_test.cpp:324 (v1_it[1] == 4)
[FAIL ASSERT] {vector} {vector.rbegin} src/vector_test.cpp:326 (v1_it[2] == 3)
[FAIL ASSERT] {vector} {vector.rbegin} src/vector_test.cpp:328 (v1_it[3] == 2)
[FAIL ASSERT] {vector} {vector.rbegin} src/vector_test.cpp:330 (v1_it[4] == 1)
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:333 (v1_it == v1.rbegin())
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:334 (v1_it != v1.rend())
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:338 (v1_it >= v1.rbegin())
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:339 (v1_it >= v1.rbegin())
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:340 (v1_it <= v1.rbegin())
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:341 (v1_it <= v1.rbegin())
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:344 (v1_it < v1.rend())
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:348 (*(v1_it + i) == arr1[4 - i])
f-> 5 s-> 5
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:348 (*(v1_it + i) == arr1[4 - i])
f-> 4 s-> 4
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:348 (*(v1_it + i) == arr1[4 - i])
f-> 3 s-> 3
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:348 (*(v1_it + i) == arr1[4 - i])
f-> 2 s-> 2
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:348 (*(v1_it + i) == arr1[4 - i])
f-> 1 s-> 1
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:353 (*v1_it++ == arr1[4 - i])
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:353 (*v1_it++ == arr1[4 - i])
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:353 (*v1_it++ == arr1[4 - i])
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:353 (*v1_it++ == arr1[4 - i])
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:353 (*v1_it++ == arr1[4 - i])
[PASS       ] {vector} {vector.rbegin} src/vector_test.cpp:354 (v1_it == v1.rend())
[PASS       ] {Stack} {Stack.Stack default} src/stack_test.cpp:13 (s1.size() == 0)
[PASS       ] {Stack} {Stack.Stack default} src/stack_test.cpp:14 (s2.size() == 0)
[PASS       ] {Stack} {Stack.Stack default} src/stack_test.cpp:15 (s3.size() == 0)
[PASS       ] {Stack} {Stack.Stack default} src/stack_test.cpp:16 (s4.size() == 0)
[PASS       ] {Stack} {Stack.Stack default} src/stack_test.cpp:18 (s1.empty())
[PASS       ] {Stack} {Stack.Stack default} src/stack_test.cpp:19 (s2.empty())
[PASS       ] {Stack} {Stack.Stack default} src/stack_test.cpp:20 (s3.empty())
[PASS       ] {Stack} {Stack.Stack default} src/stack_test.cpp:21 (s4.empty())
[PASS       ] {Stack} {Stack.Stack copy} src/stack_test.cpp:35 (s1.size() == 3)
[PASS       ] {Stack} {Stack.Stack copy} src/stack_test.cpp:36 (s1.top() == 3)
[PASS       ] {Stack} {Stack.Stack copy} src/stack_test.cpp:38 (s1.top() == 2)
[PASS       ] {Stack} {Stack.Stack copy} src/stack_test.cpp:40 (s1.top() == 1)
[PASS       ] {Stack} {Stack.Stack copy} src/stack_test.cpp:45 (s2.size() == 2)
[PASS       ] {Stack} {Stack.Stack copy} src/stack_test.cpp:46 (s2.top() == 'b')
[PASS       ] {Stack} {Stack.Stack copy} src/stack_test.cpp:48 (s2.top() == 'a')
[PASS       ] {Stack} {Stack.operator=} src/stack_test.cpp:62 (s1.size() == 3)
[PASS       ] {Stack} {Stack.operator=} src/stack_test.cpp:63 (s1.top() == 3)
[PASS       ] {Stack} {Stack.operator=} src/stack_test.cpp:65 (s1.top() == 2)
[PASS       ] {Stack} {Stack.operator=} src/stack_test.cpp:67 (s1.top() == 1)
[PASS       ] {Stack} {Stack.operator=} src/stack_test.cpp:72 (s2.size() == 2)
[PASS       ] {Stack} {Stack.operator=} src/stack_test.cpp:73 (s2.top() == 'b')
[PASS       ] {Stack} {Stack.operator=} src/stack_test.cpp:75 (s2.top() == 'a')
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:85 (s1.size() == 1)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:86 (s1.top() == 1)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:88 (s1.size() == 2)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:89 (s1.top() == 2)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:91 (s1.size() == 3)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:92 (s1.top() == 3)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:94 (s1.size() == 4)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:95 (s1.top() == 4)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:97 (s1.size() == 5)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:98 (s1.top() == 5)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:100 (s1.size() == 6)
[PASS       ] {Stack} {Stack.top} src/stack_test.cpp:101 (s1.top() == 6)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:111 (s1.size() == 1)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:112 (s1.top() == 1)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:114 (s1.size() == 2)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:115 (s1.top() == 2)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:117 (s1.size() == 3)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:118 (s1.top() == 3)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:120 (s1.size() == 4)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:121 (s1.top() == 4)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:123 (s1.size() == 5)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:124 (s1.top() == 5)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:126 (s1.size() == 6)
[PASS       ] {Stack} {Stack.push} src/stack_test.cpp:127 (s1.top() == 6)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:142 (s1.size() == 5)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:143 (s1.top() == 5)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:145 (s1.size() == 4)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:146 (s1.top() == 4)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:148 (s1.size() == 3)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:149 (s1.top() == 3)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:151 (s1.size() == 2)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:152 (s1.top() == 2)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:154 (s1.size() == 1)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:155 (s1.top() == 1)
[PASS       ] {Stack} {Stack.pop} src/stack_test.cpp:157 (s1.size() == 0)
[PASS       ] {Stack} {Stack.operator[== !=]} src/stack_test.cpp:167 (s1 == s2)
[PASS       ] {Stack} {Stack.operator[== !=]} src/stack_test.cpp:168 (s2 == s1)
[PASS       ] {Stack} {Stack.operator[== !=]} src/stack_test.cpp:170 (s1 != s2)
[PASS       ] {Stack} {Stack.operator[== !=]} src/stack_test.cpp:171 (s2 != s1)
[PASS       ] {Stack} {Stack.operator[== !=]} src/stack_test.cpp:173 (s1 == s2)
[PASS       ] {Stack} {Stack.operator[== !=]} src/stack_test.cpp:174 (s2 == s1)
[PASS       ] {Stack} {Stack.operator[== !=]} src/stack_test.cpp:176 (s1 != s2)
[PASS       ] {Stack} {Stack.operator[== !=]} src/stack_test.cpp:177 (s2 != s1)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:197 (s1 < s2)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:198 (s1 < s3)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:199 (s2 > s1)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:200 (s2 < s3)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:201 (s3 > s1)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:202 (s3 > s2)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:204 (s1 <= s1)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:205 (s1 >= s1)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:206 (s2 <= s2)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:207 (s2 >= s2)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:208 (s3 <= s3)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:209 (s3 >= s3)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:215 (s4 > s1)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:216 (s4 > s2)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:217 (s4 > s3)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:219 (s4 <= s4)
[PASS       ] {Stack} {Stack.operator[< > <= >=]} src/stack_test.cpp:220 (s4 >= s4)
